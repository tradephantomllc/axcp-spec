// © 2025 TradePhantom LLC – BSL 1.1 / Apache-2.0 fallback

syntax = "proto3";

package axcp.v0_1;

option go_package = "github.com/tradephantom/axcp-spec/sdk/go/axcp/internal/pb;pb";

/* ─────────────  ENVELOPE  ─────────────────────────────────────────── */

message AxcpEnvelope {
  uint32 version       = 1;   // protocol version (currently 1)
  string trace_id      = 2;   // request / conversation correlation
  uint32 profile       = 3;   // 0 = Basic … 3 = Enterprise-Privacy

  oneof payload {                 // main frame types
    ContextPatch        context_patch  = 4;
    CapabilityMessage   capability_msg = 5;
    RoutePolicyMessage  route_msg      = 6;
    ErrorMessage        error          = 7;
    ProfileNegotiate    profile_neg    = 8;  // QUIC capability handshake
    ProfileAck          profile_ack    = 9;
    RetryEnvelope       retry_env      = 10; // store-and-forward batch
    TelemetryDatagram   telemetry      = 11; // QUIC DATAGRAM
  }

  bytes  signature          = 100; // detached sig (profile ≥1)
  bytes  attestation_proof  = 101; // SGX / SEV quote (profile ≥2)
}

/* ─────────────  CONTEXT-SYNC  ─────────────────────────────────────── */

message DeltaOp {
  enum OpType { ADD = 0; REPLACE = 1; REMOVE = 2; MERGE = 3; }
  OpType op   = 1;
  string path = 2;         // JSON Pointer
  bytes  data = 3;         // gz-compressed payload
  uint64 ts   = 4;         // lamport / microseconds
}

message ContextPatch {
  string         context_id   = 1;
  uint64         base_version = 2;
  repeated DeltaOp ops        = 3;
}

message ContextGraphVersion {
  string context_id = 1;
  uint64 version    = 2;
}

message SyncSubscribe { ContextGraphVersion from = 1; }
message SyncRequest   {
  ContextGraphVersion missing_from = 1;
  uint64              to_version   = 2;
}

message RetryEnvelope {
  repeated ContextPatch buffered_patches = 1;
  uint32                ttl_ms           = 2;
}

/* ─────────────  CAPABILITY NEGOTIATION (TOOLS)  ───────────────────── */

message CapabilityOffer   { CapabilityDescriptor desc    = 1; }
message CapabilityRequest { repeated string ids          = 1; }
message CapabilityAck     { repeated string accepted     = 1; } // ***tool list ack***

message CapabilityMessage {
  oneof kind {
    CapabilityOffer   offer   = 1;
    CapabilityRequest request = 2;
    CapabilityAck     ack     = 3;
  }
}

message CapabilityDescriptor {
  string  tool_id           = 1;
  string  input_schema      = 2;
  string  output_schema     = 3;
  uint32  timeout_ms        = 4;
  string  resource_hint     = 5;
  repeated string auth_scope = 6;
  string  descriptor_version = 7;
  DpParams dp               = 8;   // profile ≥3
}

/* ─────────────  PROFILE HANDSHAKE (dynamic)  ──────────────────────── */

message ProfileNegotiate {
  uint32 supported_mask = 1;   // bitmask; bit0=Profile-0 …
  uint32 min_required   = 2;   // lowest acceptable profile
}

message ProfileAck {            // ⬅︎ renamed to avoid clash
  uint32 agreed_profile = 1;
}

/* ─────────────  ROUTING POLICY  ───────────────────────────────────── */

message RoutePolicyMessage {
  string policy_id  = 1;
  bytes  wasm_blob  = 2;
  uint32 ttl_ms     = 3;
}

/* ─────────────  TELEMETRY (QUIC DATAGRAM)  ────────────────────────── */

message SystemStats {
  uint32 cpu_percent    = 1;
  uint64 mem_bytes      = 2;
  uint32 temperature_c  = 3;
}

message TokenUsage {
  uint32 prompt_tokens      = 1;
  uint32 completion_tokens  = 2;
}

message TelemetryDatagram {
  uint64 timestamp_ms = 1;
  oneof payload {
    SystemStats system = 10;
    TokenUsage  tokens = 11;
  }
}

/* ─────────────  DIFFERENTIAL-PRIVACY  ─────────────────────────────── */

enum DpMechanism { LAPLACE = 0; GAUSSIAN = 1; }

message DpParams {
  double        epsilon   = 1;
  double        delta     = 2;
  DpMechanism   mech      = 3;
  double        clip_norm = 4;
  enum Granularity { RECORD = 0; BATCH = 1; TOKEN = 2; }
  Granularity   gran      = 5;
}

/* ─────────────  ERROR HANDLING  ───────────────────────────────────── */

enum ErrorCode {
  UNKNOWN                     = 0;
  INVALID_CONTEXT             = 1;
  UNAUTHORIZED                = 2;
  TOOL_NOT_FOUND              = 3;
  TIMEOUT                     = 4;
  UNSUPPORTED_VERSION         = 5;
  BAD_DELTA                   = 6;
  PAYLOAD_TOO_LARGE           = 7;
  MALFORMED_REQUEST           = 8;
  TOO_MANY_REQUESTS           = 9;
  PROFILE_MISMATCH            = 12;
  PROFILE_UNSUPPORTED         = 13;
  PROFILE_NEGOTIATION_FAILED  = 14;
  MISSING_PATCH_RANGE         = 15;
  DP_POLICY_CONFLICT          = 16;
}

message ErrorMessage {
  uint32     code        = 1;
  string     reason      = 2;
  bytes      diagnostics = 3;
}

/* ─────────────  LEGACY WRAPPERS (optional logging)  ──────────────── */

message McpJsonBlob { bytes json = 1; }
message A2AJsonBlob { bytes json = 1; }
