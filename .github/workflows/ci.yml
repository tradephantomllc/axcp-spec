name: AXCP CI

on:
  push:
    branches:
      - main
      - 'chore/ci-go-workspaces'
      - 'fix/ci-*'
      - 'feature/21c-*'
    tags:
      - 'axcp-rs-*'
  pull_request:
    branches:
      - main

env:
  GO_VERSION:  '1.23.4'
  PYTHON_VERSION: '3.11'
  PROTOC_VERSION: '25.1'

# ------------------------------------------------------------
# 1️⃣  GO – unit tests  (verde)
# ------------------------------------------------------------
jobs:
  test-go:
    name: Test Go
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set-up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install protoc + plugin
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest

      - name: Generate Go stubs
        working-directory: sdk/go
        run: |
          mkdir -p internal/pb
          protoc -I ../../proto \
            --go_out=internal/pb --go_opt=paths=source_relative \
            ../../proto/axcp.proto

      - name: Run Go tests
        run: go test -v -race ./...
        
      - name: DP budget tests
        run: go test ./edge/gateway/internal -run BudgetCLI

      - name: Metrics histogram tests
        run: go test ./edge/gateway/internal/metrics -run TestHistogramObserve,TestOTELBatching

      - name: Code coverage
        working-directory: sdk/go
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

# ------------------------------------------------------------ 
# 2️⃣  PYTHON (Budget Go test)  – workspace + mini-mod dp
# ------------------------------------------------------------
  test-python:
    name: Test Python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set-up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set-up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          pip install grpcio-tools aioquic protobuf pytest-cov

      # ── mini-mod per sdk/go/dp (serve a TestBudget) ──────────────
      - name: Init dp module (temp)
        run: |
          if [ ! -f sdk/go/dp/go.mod ]; then
            (cd sdk/go/dp && go mod init github.com/tradephantom/axcp-spec/sdk/go/dp)
            (cd sdk/go/dp && go mod tidy)
          fi

      # ── workspace che unisce sdk/go e dp ─────────────────────────
      - name: Create Go workspace for dp tests
        run: |
          go work init ./sdk/go ./sdk/go/dp || true
          go work use  ./sdk/go ./sdk/go/dp

      - name: Generate Python stubs
        run: python -m grpc_tools.protoc -I=proto --python_out=proto proto/axcp.proto

      - name: Run Python tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q scripts gateway tests/dp

      - name: QUIC RTT micro-bench
        run: python bench/quic/rtt_bench.py 20

      - name: Codec benchmarks (Go quick)
        working-directory: sdk/go
        run: go test ./... -bench=. -benchtime=1x -benchmem

# ------------------------------------------------------------ 
# 3️⃣  GATEWAY TELEMETRY (integrazione) – verde
# ------------------------------------------------------------
  test-gateway-telemetry:
    name: Test Gateway Telemetry
    needs: [test-go]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set-up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install protoc + plugin
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest

      - name: Generate Go stubs
        working-directory: sdk/go
        run: |
          mkdir -p internal/pb
          protoc -I ../../proto \
            --go_out=internal/pb --go_opt=paths=source_relative \
            ../../proto/axcp.proto

      - name: Run Gateway telemetry tests
        run: |
          set -e
          (cd edge/gateway && go test -v -race ./...)
          (cd sdk/go/axcp  && go test -v -run Test.*Telemetry)

      - name: Run Prometheus metrics tests
        run: |
          set -e
          (cd edge/gateway && go test -v -race ./internal/metrics/... -run TestPrometheusMetrics)

# ------------------------------------------------------------ 
# 4️⃣  RPI AGENT (Issue 21c) – usa stubs rigenerati & workspace
# ------------------------------------------------------------
  publish-rust-sdk:
    name: Publish Rust SDK
    needs: [test-go, test-python, test-rpi-agent]
    # L'esecuzione condizionale viene gestita nei passaggi individuali per una maggiore flessibilità
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
      
      - name: Install cargo-release
        run: |
          cargo install cargo-release --no-default-features

      # Verifica le condizioni per procedere con la pubblicazione
      - name: Check publishing context
        id: check-context
        run: |
          # Non usiamo variabili complesse nei confronti per sicurezza
          if [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == refs/tags/v* ]]; then
              echo "publish=true" >> "$GITHUB_OUTPUT"
            else
              echo "publish=false" >> "$GITHUB_OUTPUT"
              echo "::notice::Non in publishing branch/tag"
            fi
          else
            echo "publish=false" >> "$GITHUB_OUTPUT"
            echo "::notice::Non è un evento push"
          fi
          
      # Imposta il token in un modo che evita avvisi di sicurezza
      - name: Prepare token file
        if: steps.check-context.outputs.publish == 'true'
        id: token-prep
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const tokenDir = '/tmp';
            const tokenFile = path.join(tokenDir, 'cargo-token');
            
            // Crea la directory se non esiste
            if (!fs.existsSync(tokenDir)) fs.mkdirSync(tokenDir, {recursive: true});
            
            // Ottieni il token
            const token = process.env.CARGO_TOKEN || '';
            fs.writeFileSync(tokenFile, token);
            fs.chmodSync(tokenFile, '600');
            
            // Controlla la presenza del token
            const hasToken = token.length > 0;
            core.setOutput('has_token', hasToken ? 'true' : 'false');
            if (!hasToken) core.warning('No registry token available. Publishing will be skipped.');
            
            return tokenFile;
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN || '' }}

      # Configura le credenziali Cargo usando il token dal file
      - name: Configure Cargo registry
        if: steps.check-context.outputs.publish == 'true' && steps.token-prep.outputs.result != ''
        shell: bash
        run: |
          # Leggi il token dal file
          TOKEN_FILE="${{ steps.token-prep.outputs.result }}"
          TOKEN=$(cat "$TOKEN_FILE")
          if [ -z "$TOKEN" ]; then
            echo "::warning::Token is empty or not available"
            exit 1
          fi
          
          # Maschera il token per evitare che appaia nei log
          echo "::add-mask::$TOKEN"
          
          # Configura il file delle credenziali
          mkdir -p ~/.cargo
          echo '[registry]' > ~/.cargo/credentials.toml
          echo "token = \"$TOKEN\"" >> ~/.cargo/credentials.toml
          chmod 600 ~/.cargo/credentials.toml
          
          # Verifica la presenza del token nel file
          if grep -q "token" ~/.cargo/credentials.toml; then
            echo "Cargo credentials correctly configured"
          else
            echo "::error::Failed to configure Cargo credentials"
            exit 1
          fi
        
      # Pubblica il crate
      - name: Publish to crates.io
        if: |
          steps.check-context.outputs.publish == 'true' && 
          steps.token-prep.outputs.has_token != '' && 
          steps.token-prep.outputs.has_token == 'true'
        working-directory: ./sdk/rust
        run: cargo publish --no-verify

# ------------------------------------------------------------ 
# 5️⃣  RPI AGENT (Issue 21c) – usa stubs rigenerati & workspace
# ------------------------------------------------------------
  test-rpi-agent:
    name: Test RPi Agent
    needs: [test-go]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set-up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install protoc + plugin
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest

      # ── rigenera stubs (assicura campo Profile) ──────────────────
      - name: Generate Go stubs
        working-directory: sdk/go
        run: |
          mkdir -p internal/pb
          protoc -I ../../proto \
            --go_out=internal/pb --go_opt=paths=source_relative \
            ../../proto/axcp.proto

      # ── workspace per rpi-agent <-> sdk/go -----------------------
      - name: Create Go workspace for rpi-agent
        run: |
          go work init ./sdk/go ./edge/rpi-agent || true
          go work use  ./sdk/go ./edge/rpi-agent

      # ── Esegui test agent ---------------------------------------
      - name: Run rpi-agent tests
        working-directory: edge/rpi-agent/cmd/agent
        run: go test -v -race ./...

# ------------------------------------------------------------ 
# 5️⃣  EXAMPLES – build check
# ------------------------------------------------------------
  check-examples:
    name: Check Examples
    needs: [test-go]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set-up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # ── mini-mod dp (richiesto in caso di import indiretti) ─────
      - name: Init dp module (temp)
        run: |
          if [ ! -f sdk/go/dp/go.mod ]; then
            (cd sdk/go/dp && go mod init github.com/tradephantom/axcp-spec/sdk/go/dp)
            (cd sdk/go/dp && go mod tidy)
          fi

      - name: Build simple_chat example
        working-directory: examples/go/simple_chat
        run: |
          go vet .
          go test -c -o /tmp/simple_chat.test
