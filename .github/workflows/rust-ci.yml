name: Rust CI

on:
  push:
    paths:
      - 'sdk/rust/**'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    paths:
      - 'sdk/rust/**'
      - '.github/workflows/rust-ci.yml'
  schedule:
    - cron: '0 0 * * *' # Daily build

defaults:
  run:
    working-directory: sdk/rust

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        include:
          - rust: stable
            cache-key: stable
          - rust: beta
            cache-key: beta
          - rust: nightly
            cache-key: nightly

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust (${{ matrix.rust }})
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.cache-key }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.cache-key }}-

    - name: Check code formatting
      if: matrix.rust == 'stable'
      run: cargo fmt -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy -- -D warnings

    - name: Run tests
      run: cargo test --verbose

    - name: Build in release mode
      run: cargo build --release

  # Additional checks that only run on stable
  check:
    name: Additional Checks
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
    - uses: actions/checkout@v3
    - name: Install stable Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Check documentation
      working-directory: sdk/rust
      run: |
        cargo doc --no-deps --document-private-items
        cargo deadlinks --dir target/doc/axcp
    - name: Check for unused dependencies
      working-directory: sdk/rust
      run: cargo udeps --tests --all-targets
