// © 2025 TradePhantom LLC – BSL 1.1 / Apache-2.0 fallback

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v6.31.0
// source: proto/axcp.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DpMechanism int32

const (
	DpMechanism_LAPLACE  DpMechanism = 0
	DpMechanism_GAUSSIAN DpMechanism = 1
)

// Enum value maps for DpMechanism.
var (
	DpMechanism_name = map[int32]string{
		0: "LAPLACE",
		1: "GAUSSIAN",
	}
	DpMechanism_value = map[string]int32{
		"LAPLACE":  0,
		"GAUSSIAN": 1,
	}
)

func (x DpMechanism) Enum() *DpMechanism {
	p := new(DpMechanism)
	*p = x
	return p
}

func (x DpMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DpMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_axcp_proto_enumTypes[0].Descriptor()
}

func (DpMechanism) Type() protoreflect.EnumType {
	return &file_proto_axcp_proto_enumTypes[0]
}

func (x DpMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DpMechanism.Descriptor instead.
func (DpMechanism) EnumDescriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{0}
}

type ErrorCode int32

const (
	ErrorCode_UNKNOWN                    ErrorCode = 0
	ErrorCode_INVALID_CONTEXT            ErrorCode = 1
	ErrorCode_UNAUTHORIZED               ErrorCode = 2
	ErrorCode_TOOL_NOT_FOUND             ErrorCode = 3
	ErrorCode_TIMEOUT                    ErrorCode = 4
	ErrorCode_UNSUPPORTED_VERSION        ErrorCode = 5
	ErrorCode_BAD_DELTA                  ErrorCode = 6
	ErrorCode_PAYLOAD_TOO_LARGE          ErrorCode = 7
	ErrorCode_MALFORMED_REQUEST          ErrorCode = 8
	ErrorCode_TOO_MANY_REQUESTS          ErrorCode = 9
	ErrorCode_PROFILE_MISMATCH           ErrorCode = 12
	ErrorCode_PROFILE_UNSUPPORTED        ErrorCode = 13
	ErrorCode_PROFILE_NEGOTIATION_FAILED ErrorCode = 14
	ErrorCode_MISSING_PATCH_RANGE        ErrorCode = 15
	ErrorCode_DP_POLICY_CONFLICT         ErrorCode = 16
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "INVALID_CONTEXT",
		2:  "UNAUTHORIZED",
		3:  "TOOL_NOT_FOUND",
		4:  "TIMEOUT",
		5:  "UNSUPPORTED_VERSION",
		6:  "BAD_DELTA",
		7:  "PAYLOAD_TOO_LARGE",
		8:  "MALFORMED_REQUEST",
		9:  "TOO_MANY_REQUESTS",
		12: "PROFILE_MISMATCH",
		13: "PROFILE_UNSUPPORTED",
		14: "PROFILE_NEGOTIATION_FAILED",
		15: "MISSING_PATCH_RANGE",
		16: "DP_POLICY_CONFLICT",
	}
	ErrorCode_value = map[string]int32{
		"UNKNOWN":                    0,
		"INVALID_CONTEXT":            1,
		"UNAUTHORIZED":               2,
		"TOOL_NOT_FOUND":             3,
		"TIMEOUT":                    4,
		"UNSUPPORTED_VERSION":        5,
		"BAD_DELTA":                  6,
		"PAYLOAD_TOO_LARGE":          7,
		"MALFORMED_REQUEST":          8,
		"TOO_MANY_REQUESTS":          9,
		"PROFILE_MISMATCH":           12,
		"PROFILE_UNSUPPORTED":        13,
		"PROFILE_NEGOTIATION_FAILED": 14,
		"MISSING_PATCH_RANGE":        15,
		"DP_POLICY_CONFLICT":         16,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_axcp_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_proto_axcp_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{1}
}

type DeltaOp_OpType int32

const (
	DeltaOp_ADD     DeltaOp_OpType = 0
	DeltaOp_REPLACE DeltaOp_OpType = 1
	DeltaOp_REMOVE  DeltaOp_OpType = 2
	DeltaOp_MERGE   DeltaOp_OpType = 3
)

// Enum value maps for DeltaOp_OpType.
var (
	DeltaOp_OpType_name = map[int32]string{
		0: "ADD",
		1: "REPLACE",
		2: "REMOVE",
		3: "MERGE",
	}
	DeltaOp_OpType_value = map[string]int32{
		"ADD":     0,
		"REPLACE": 1,
		"REMOVE":  2,
		"MERGE":   3,
	}
)

func (x DeltaOp_OpType) Enum() *DeltaOp_OpType {
	p := new(DeltaOp_OpType)
	*p = x
	return p
}

func (x DeltaOp_OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeltaOp_OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_axcp_proto_enumTypes[2].Descriptor()
}

func (DeltaOp_OpType) Type() protoreflect.EnumType {
	return &file_proto_axcp_proto_enumTypes[2]
}

func (x DeltaOp_OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeltaOp_OpType.Descriptor instead.
func (DeltaOp_OpType) EnumDescriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{1, 0}
}

type DpParams_Granularity int32

const (
	DpParams_RECORD DpParams_Granularity = 0
	DpParams_BATCH  DpParams_Granularity = 1
	DpParams_TOKEN  DpParams_Granularity = 2
)

// Enum value maps for DpParams_Granularity.
var (
	DpParams_Granularity_name = map[int32]string{
		0: "RECORD",
		1: "BATCH",
		2: "TOKEN",
	}
	DpParams_Granularity_value = map[string]int32{
		"RECORD": 0,
		"BATCH":  1,
		"TOKEN":  2,
	}
)

func (x DpParams_Granularity) Enum() *DpParams_Granularity {
	p := new(DpParams_Granularity)
	*p = x
	return p
}

func (x DpParams_Granularity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DpParams_Granularity) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_axcp_proto_enumTypes[3].Descriptor()
}

func (DpParams_Granularity) Type() protoreflect.EnumType {
	return &file_proto_axcp_proto_enumTypes[3]
}

func (x DpParams_Granularity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DpParams_Granularity.Descriptor instead.
func (DpParams_Granularity) EnumDescriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{18, 0}
}

type AxcpEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`               // protocol version (currently 1)
	TraceId string `protobuf:"bytes,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"` // request / conversation correlation
	Profile uint32 `protobuf:"varint,3,opt,name=profile,proto3" json:"profile,omitempty"`               // 0 = Basic … 3 = Enterprise-Privacy
	// Types that are assignable to Payload:
	//
	//	*AxcpEnvelope_ContextPatch
	//	*AxcpEnvelope_CapabilityMsg
	//	*AxcpEnvelope_RouteMsg
	//	*AxcpEnvelope_Error
	//	*AxcpEnvelope_ProfileNeg
	//	*AxcpEnvelope_ProfileAck
	//	*AxcpEnvelope_RetryEnv
	//	*AxcpEnvelope_Telemetry
	Payload          isAxcpEnvelope_Payload `protobuf_oneof:"payload"`
	Signature        []byte                 `protobuf:"bytes,100,opt,name=signature,proto3" json:"signature,omitempty"`                                       // detached sig (profile ≥1)
	AttestationProof []byte                 `protobuf:"bytes,101,opt,name=attestation_proof,json=attestationProof,proto3" json:"attestation_proof,omitempty"` // SGX / SEV quote (profile ≥2)
}

func (x *AxcpEnvelope) Reset() {
	*x = AxcpEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AxcpEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxcpEnvelope) ProtoMessage() {}

func (x *AxcpEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxcpEnvelope.ProtoReflect.Descriptor instead.
func (*AxcpEnvelope) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{0}
}

func (x *AxcpEnvelope) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AxcpEnvelope) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *AxcpEnvelope) GetProfile() uint32 {
	if x != nil {
		return x.Profile
	}
	return 0
}

func (m *AxcpEnvelope) GetPayload() isAxcpEnvelope_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AxcpEnvelope) GetContextPatch() *ContextPatch {
	if x, ok := x.GetPayload().(*AxcpEnvelope_ContextPatch); ok {
		return x.ContextPatch
	}
	return nil
}

func (x *AxcpEnvelope) GetCapabilityMsg() *CapabilityMessage {
	if x, ok := x.GetPayload().(*AxcpEnvelope_CapabilityMsg); ok {
		return x.CapabilityMsg
	}
	return nil
}

func (x *AxcpEnvelope) GetRouteMsg() *RoutePolicyMessage {
	if x, ok := x.GetPayload().(*AxcpEnvelope_RouteMsg); ok {
		return x.RouteMsg
	}
	return nil
}

func (x *AxcpEnvelope) GetError() *ErrorMessage {
	if x, ok := x.GetPayload().(*AxcpEnvelope_Error); ok {
		return x.Error
	}
	return nil
}

func (x *AxcpEnvelope) GetProfileNeg() *ProfileNegotiate {
	if x, ok := x.GetPayload().(*AxcpEnvelope_ProfileNeg); ok {
		return x.ProfileNeg
	}
	return nil
}

func (x *AxcpEnvelope) GetProfileAck() *ProfileAck {
	if x, ok := x.GetPayload().(*AxcpEnvelope_ProfileAck); ok {
		return x.ProfileAck
	}
	return nil
}

func (x *AxcpEnvelope) GetRetryEnv() *RetryEnvelope {
	if x, ok := x.GetPayload().(*AxcpEnvelope_RetryEnv); ok {
		return x.RetryEnv
	}
	return nil
}

func (x *AxcpEnvelope) GetTelemetry() *TelemetryDatagram {
	if x, ok := x.GetPayload().(*AxcpEnvelope_Telemetry); ok {
		return x.Telemetry
	}
	return nil
}

func (x *AxcpEnvelope) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AxcpEnvelope) GetAttestationProof() []byte {
	if x != nil {
		return x.AttestationProof
	}
	return nil
}

type isAxcpEnvelope_Payload interface {
	isAxcpEnvelope_Payload()
}

type AxcpEnvelope_ContextPatch struct {
	ContextPatch *ContextPatch `protobuf:"bytes,4,opt,name=context_patch,json=contextPatch,proto3,oneof"`
}

type AxcpEnvelope_CapabilityMsg struct {
	CapabilityMsg *CapabilityMessage `protobuf:"bytes,5,opt,name=capability_msg,json=capabilityMsg,proto3,oneof"`
}

type AxcpEnvelope_RouteMsg struct {
	RouteMsg *RoutePolicyMessage `protobuf:"bytes,6,opt,name=route_msg,json=routeMsg,proto3,oneof"`
}

type AxcpEnvelope_Error struct {
	Error *ErrorMessage `protobuf:"bytes,7,opt,name=error,proto3,oneof"`
}

type AxcpEnvelope_ProfileNeg struct {
	ProfileNeg *ProfileNegotiate `protobuf:"bytes,8,opt,name=profile_neg,json=profileNeg,proto3,oneof"` // QUIC capability handshake
}

type AxcpEnvelope_ProfileAck struct {
	ProfileAck *ProfileAck `protobuf:"bytes,9,opt,name=profile_ack,json=profileAck,proto3,oneof"`
}

type AxcpEnvelope_RetryEnv struct {
	RetryEnv *RetryEnvelope `protobuf:"bytes,10,opt,name=retry_env,json=retryEnv,proto3,oneof"` // store-and-forward batch
}

type AxcpEnvelope_Telemetry struct {
	Telemetry *TelemetryDatagram `protobuf:"bytes,11,opt,name=telemetry,proto3,oneof"` // QUIC DATAGRAM
}

func (*AxcpEnvelope_ContextPatch) isAxcpEnvelope_Payload() {}

func (*AxcpEnvelope_CapabilityMsg) isAxcpEnvelope_Payload() {}

func (*AxcpEnvelope_RouteMsg) isAxcpEnvelope_Payload() {}

func (*AxcpEnvelope_Error) isAxcpEnvelope_Payload() {}

func (*AxcpEnvelope_ProfileNeg) isAxcpEnvelope_Payload() {}

func (*AxcpEnvelope_ProfileAck) isAxcpEnvelope_Payload() {}

func (*AxcpEnvelope_RetryEnv) isAxcpEnvelope_Payload() {}

func (*AxcpEnvelope_Telemetry) isAxcpEnvelope_Payload() {}

type DeltaOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op   DeltaOp_OpType `protobuf:"varint,1,opt,name=op,proto3,enum=axcp.v0_1.DeltaOp_OpType" json:"op,omitempty"`
	Path string         `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"` // JSON Pointer
	Data []byte         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // gz-compressed payload
	Ts   uint64         `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`    // lamport / microseconds
}

func (x *DeltaOp) Reset() {
	*x = DeltaOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaOp) ProtoMessage() {}

func (x *DeltaOp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaOp.ProtoReflect.Descriptor instead.
func (*DeltaOp) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{1}
}

func (x *DeltaOp) GetOp() DeltaOp_OpType {
	if x != nil {
		return x.Op
	}
	return DeltaOp_ADD
}

func (x *DeltaOp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DeltaOp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeltaOp) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

type ContextPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextId   string     `protobuf:"bytes,1,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	BaseVersion uint64     `protobuf:"varint,2,opt,name=base_version,json=baseVersion,proto3" json:"base_version,omitempty"`
	Ops         []*DeltaOp `protobuf:"bytes,3,rep,name=ops,proto3" json:"ops,omitempty"`
}

func (x *ContextPatch) Reset() {
	*x = ContextPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextPatch) ProtoMessage() {}

func (x *ContextPatch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextPatch.ProtoReflect.Descriptor instead.
func (*ContextPatch) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{2}
}

func (x *ContextPatch) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

func (x *ContextPatch) GetBaseVersion() uint64 {
	if x != nil {
		return x.BaseVersion
	}
	return 0
}

func (x *ContextPatch) GetOps() []*DeltaOp {
	if x != nil {
		return x.Ops
	}
	return nil
}

type ContextGraphVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextId string `protobuf:"bytes,1,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	Version   uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ContextGraphVersion) Reset() {
	*x = ContextGraphVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextGraphVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextGraphVersion) ProtoMessage() {}

func (x *ContextGraphVersion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextGraphVersion.ProtoReflect.Descriptor instead.
func (*ContextGraphVersion) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{3}
}

func (x *ContextGraphVersion) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

func (x *ContextGraphVersion) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type SyncSubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *ContextGraphVersion `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *SyncSubscribe) Reset() {
	*x = SyncSubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSubscribe) ProtoMessage() {}

func (x *SyncSubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSubscribe.ProtoReflect.Descriptor instead.
func (*SyncSubscribe) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{4}
}

func (x *SyncSubscribe) GetFrom() *ContextGraphVersion {
	if x != nil {
		return x.From
	}
	return nil
}

type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissingFrom *ContextGraphVersion `protobuf:"bytes,1,opt,name=missing_from,json=missingFrom,proto3" json:"missing_from,omitempty"`
	ToVersion   uint64               `protobuf:"varint,2,opt,name=to_version,json=toVersion,proto3" json:"to_version,omitempty"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{5}
}

func (x *SyncRequest) GetMissingFrom() *ContextGraphVersion {
	if x != nil {
		return x.MissingFrom
	}
	return nil
}

func (x *SyncRequest) GetToVersion() uint64 {
	if x != nil {
		return x.ToVersion
	}
	return 0
}

type RetryEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferedPatches []*ContextPatch `protobuf:"bytes,1,rep,name=buffered_patches,json=bufferedPatches,proto3" json:"buffered_patches,omitempty"`
	TtlMs           uint32          `protobuf:"varint,2,opt,name=ttl_ms,json=ttlMs,proto3" json:"ttl_ms,omitempty"`
}

func (x *RetryEnvelope) Reset() {
	*x = RetryEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryEnvelope) ProtoMessage() {}

func (x *RetryEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryEnvelope.ProtoReflect.Descriptor instead.
func (*RetryEnvelope) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{6}
}

func (x *RetryEnvelope) GetBufferedPatches() []*ContextPatch {
	if x != nil {
		return x.BufferedPatches
	}
	return nil
}

func (x *RetryEnvelope) GetTtlMs() uint32 {
	if x != nil {
		return x.TtlMs
	}
	return 0
}

type CapabilityOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc *CapabilityDescriptor `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *CapabilityOffer) Reset() {
	*x = CapabilityOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityOffer) ProtoMessage() {}

func (x *CapabilityOffer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityOffer.ProtoReflect.Descriptor instead.
func (*CapabilityOffer) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{7}
}

func (x *CapabilityOffer) GetDesc() *CapabilityDescriptor {
	if x != nil {
		return x.Desc
	}
	return nil
}

type CapabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *CapabilityRequest) Reset() {
	*x = CapabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityRequest) ProtoMessage() {}

func (x *CapabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityRequest.ProtoReflect.Descriptor instead.
func (*CapabilityRequest) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{8}
}

func (x *CapabilityRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type CapabilityAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accepted []string `protobuf:"bytes,1,rep,name=accepted,proto3" json:"accepted,omitempty"`
}

func (x *CapabilityAck) Reset() {
	*x = CapabilityAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityAck) ProtoMessage() {}

func (x *CapabilityAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityAck.ProtoReflect.Descriptor instead.
func (*CapabilityAck) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{9}
}

func (x *CapabilityAck) GetAccepted() []string {
	if x != nil {
		return x.Accepted
	}
	return nil
}

type CapabilityMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*CapabilityMessage_Offer
	//	*CapabilityMessage_Request
	//	*CapabilityMessage_Ack
	Kind isCapabilityMessage_Kind `protobuf_oneof:"kind"`
}

func (x *CapabilityMessage) Reset() {
	*x = CapabilityMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityMessage) ProtoMessage() {}

func (x *CapabilityMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityMessage.ProtoReflect.Descriptor instead.
func (*CapabilityMessage) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{10}
}

func (m *CapabilityMessage) GetKind() isCapabilityMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *CapabilityMessage) GetOffer() *CapabilityOffer {
	if x, ok := x.GetKind().(*CapabilityMessage_Offer); ok {
		return x.Offer
	}
	return nil
}

func (x *CapabilityMessage) GetRequest() *CapabilityRequest {
	if x, ok := x.GetKind().(*CapabilityMessage_Request); ok {
		return x.Request
	}
	return nil
}

func (x *CapabilityMessage) GetAck() *CapabilityAck {
	if x, ok := x.GetKind().(*CapabilityMessage_Ack); ok {
		return x.Ack
	}
	return nil
}

type isCapabilityMessage_Kind interface {
	isCapabilityMessage_Kind()
}

type CapabilityMessage_Offer struct {
	Offer *CapabilityOffer `protobuf:"bytes,1,opt,name=offer,proto3,oneof"`
}

type CapabilityMessage_Request struct {
	Request *CapabilityRequest `protobuf:"bytes,2,opt,name=request,proto3,oneof"`
}

type CapabilityMessage_Ack struct {
	Ack *CapabilityAck `protobuf:"bytes,3,opt,name=ack,proto3,oneof"`
}

func (*CapabilityMessage_Offer) isCapabilityMessage_Kind() {}

func (*CapabilityMessage_Request) isCapabilityMessage_Kind() {}

func (*CapabilityMessage_Ack) isCapabilityMessage_Kind() {}

type CapabilityDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolId            string    `protobuf:"bytes,1,opt,name=tool_id,json=toolId,proto3" json:"tool_id,omitempty"`
	InputSchema       string    `protobuf:"bytes,2,opt,name=input_schema,json=inputSchema,proto3" json:"input_schema,omitempty"`
	OutputSchema      string    `protobuf:"bytes,3,opt,name=output_schema,json=outputSchema,proto3" json:"output_schema,omitempty"`
	TimeoutMs         uint32    `protobuf:"varint,4,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
	ResourceHint      string    `protobuf:"bytes,5,opt,name=resource_hint,json=resourceHint,proto3" json:"resource_hint,omitempty"`
	AuthScope         []string  `protobuf:"bytes,6,rep,name=auth_scope,json=authScope,proto3" json:"auth_scope,omitempty"`
	DescriptorVersion string    `protobuf:"bytes,7,opt,name=descriptor_version,json=descriptorVersion,proto3" json:"descriptor_version,omitempty"`
	Dp                *DpParams `protobuf:"bytes,8,opt,name=dp,proto3" json:"dp,omitempty"` // profile ≥3
}

func (x *CapabilityDescriptor) Reset() {
	*x = CapabilityDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityDescriptor) ProtoMessage() {}

func (x *CapabilityDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityDescriptor.ProtoReflect.Descriptor instead.
func (*CapabilityDescriptor) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{11}
}

func (x *CapabilityDescriptor) GetToolId() string {
	if x != nil {
		return x.ToolId
	}
	return ""
}

func (x *CapabilityDescriptor) GetInputSchema() string {
	if x != nil {
		return x.InputSchema
	}
	return ""
}

func (x *CapabilityDescriptor) GetOutputSchema() string {
	if x != nil {
		return x.OutputSchema
	}
	return ""
}

func (x *CapabilityDescriptor) GetTimeoutMs() uint32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

func (x *CapabilityDescriptor) GetResourceHint() string {
	if x != nil {
		return x.ResourceHint
	}
	return ""
}

func (x *CapabilityDescriptor) GetAuthScope() []string {
	if x != nil {
		return x.AuthScope
	}
	return nil
}

func (x *CapabilityDescriptor) GetDescriptorVersion() string {
	if x != nil {
		return x.DescriptorVersion
	}
	return ""
}

func (x *CapabilityDescriptor) GetDp() *DpParams {
	if x != nil {
		return x.Dp
	}
	return nil
}

type ProfileNegotiate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportedMask uint32 `protobuf:"varint,1,opt,name=supported_mask,json=supportedMask,proto3" json:"supported_mask,omitempty"` // bitmask; bit0=Profile-0 …
	MinRequired   uint32 `protobuf:"varint,2,opt,name=min_required,json=minRequired,proto3" json:"min_required,omitempty"`       // lowest acceptable profile
}

func (x *ProfileNegotiate) Reset() {
	*x = ProfileNegotiate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileNegotiate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileNegotiate) ProtoMessage() {}

func (x *ProfileNegotiate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileNegotiate.ProtoReflect.Descriptor instead.
func (*ProfileNegotiate) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{12}
}

func (x *ProfileNegotiate) GetSupportedMask() uint32 {
	if x != nil {
		return x.SupportedMask
	}
	return 0
}

func (x *ProfileNegotiate) GetMinRequired() uint32 {
	if x != nil {
		return x.MinRequired
	}
	return 0
}

type ProfileAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgreedProfile uint32 `protobuf:"varint,1,opt,name=agreed_profile,json=agreedProfile,proto3" json:"agreed_profile,omitempty"`
}

func (x *ProfileAck) Reset() {
	*x = ProfileAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileAck) ProtoMessage() {}

func (x *ProfileAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileAck.ProtoReflect.Descriptor instead.
func (*ProfileAck) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{13}
}

func (x *ProfileAck) GetAgreedProfile() uint32 {
	if x != nil {
		return x.AgreedProfile
	}
	return 0
}

type RoutePolicyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	WasmBlob []byte `protobuf:"bytes,2,opt,name=wasm_blob,json=wasmBlob,proto3" json:"wasm_blob,omitempty"`
	TtlMs    uint32 `protobuf:"varint,3,opt,name=ttl_ms,json=ttlMs,proto3" json:"ttl_ms,omitempty"`
}

func (x *RoutePolicyMessage) Reset() {
	*x = RoutePolicyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutePolicyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutePolicyMessage) ProtoMessage() {}

func (x *RoutePolicyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutePolicyMessage.ProtoReflect.Descriptor instead.
func (*RoutePolicyMessage) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{14}
}

func (x *RoutePolicyMessage) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *RoutePolicyMessage) GetWasmBlob() []byte {
	if x != nil {
		return x.WasmBlob
	}
	return nil
}

func (x *RoutePolicyMessage) GetTtlMs() uint32 {
	if x != nil {
		return x.TtlMs
	}
	return 0
}

type SystemStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuPercent   uint32 `protobuf:"varint,1,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	MemBytes     uint64 `protobuf:"varint,2,opt,name=mem_bytes,json=memBytes,proto3" json:"mem_bytes,omitempty"`
	TemperatureC uint32 `protobuf:"varint,3,opt,name=temperature_c,json=temperatureC,proto3" json:"temperature_c,omitempty"`
}

func (x *SystemStats) Reset() {
	*x = SystemStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStats) ProtoMessage() {}

func (x *SystemStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStats.ProtoReflect.Descriptor instead.
func (*SystemStats) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{15}
}

func (x *SystemStats) GetCpuPercent() uint32 {
	if x != nil {
		return x.CpuPercent
	}
	return 0
}

func (x *SystemStats) GetMemBytes() uint64 {
	if x != nil {
		return x.MemBytes
	}
	return 0
}

func (x *SystemStats) GetTemperatureC() uint32 {
	if x != nil {
		return x.TemperatureC
	}
	return 0
}

type TokenUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromptTokens     uint32 `protobuf:"varint,1,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	CompletionTokens uint32 `protobuf:"varint,2,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
}

func (x *TokenUsage) Reset() {
	*x = TokenUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUsage) ProtoMessage() {}

func (x *TokenUsage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUsage.ProtoReflect.Descriptor instead.
func (*TokenUsage) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{16}
}

func (x *TokenUsage) GetPromptTokens() uint32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *TokenUsage) GetCompletionTokens() uint32 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

type TelemetryDatagram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampMs uint64 `protobuf:"varint,1,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*TelemetryDatagram_System
	//	*TelemetryDatagram_Tokens
	Payload isTelemetryDatagram_Payload `protobuf_oneof:"payload"`
}

func (x *TelemetryDatagram) Reset() {
	*x = TelemetryDatagram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryDatagram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryDatagram) ProtoMessage() {}

func (x *TelemetryDatagram) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryDatagram.ProtoReflect.Descriptor instead.
func (*TelemetryDatagram) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{17}
}

func (x *TelemetryDatagram) GetTimestampMs() uint64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (m *TelemetryDatagram) GetPayload() isTelemetryDatagram_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TelemetryDatagram) GetSystem() *SystemStats {
	if x, ok := x.GetPayload().(*TelemetryDatagram_System); ok {
		return x.System
	}
	return nil
}

func (x *TelemetryDatagram) GetTokens() *TokenUsage {
	if x, ok := x.GetPayload().(*TelemetryDatagram_Tokens); ok {
		return x.Tokens
	}
	return nil
}

type isTelemetryDatagram_Payload interface {
	isTelemetryDatagram_Payload()
}

type TelemetryDatagram_System struct {
	System *SystemStats `protobuf:"bytes,10,opt,name=system,proto3,oneof"`
}

type TelemetryDatagram_Tokens struct {
	Tokens *TokenUsage `protobuf:"bytes,11,opt,name=tokens,proto3,oneof"`
}

func (*TelemetryDatagram_System) isTelemetryDatagram_Payload() {}

func (*TelemetryDatagram_Tokens) isTelemetryDatagram_Payload() {}

type DpParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epsilon  float64              `protobuf:"fixed64,1,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	Delta    float64              `protobuf:"fixed64,2,opt,name=delta,proto3" json:"delta,omitempty"`
	Mech     DpMechanism          `protobuf:"varint,3,opt,name=mech,proto3,enum=axcp.v0_1.DpMechanism" json:"mech,omitempty"`
	ClipNorm float64              `protobuf:"fixed64,4,opt,name=clip_norm,json=clipNorm,proto3" json:"clip_norm,omitempty"`
	Gran     DpParams_Granularity `protobuf:"varint,5,opt,name=gran,proto3,enum=axcp.v0_1.DpParams_Granularity" json:"gran,omitempty"`
}

func (x *DpParams) Reset() {
	*x = DpParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpParams) ProtoMessage() {}

func (x *DpParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpParams.ProtoReflect.Descriptor instead.
func (*DpParams) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{18}
}

func (x *DpParams) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *DpParams) GetDelta() float64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *DpParams) GetMech() DpMechanism {
	if x != nil {
		return x.Mech
	}
	return DpMechanism_LAPLACE
}

func (x *DpParams) GetClipNorm() float64 {
	if x != nil {
		return x.ClipNorm
	}
	return 0
}

func (x *DpParams) GetGran() DpParams_Granularity {
	if x != nil {
		return x.Gran
	}
	return DpParams_RECORD
}

type ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason      string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Diagnostics []byte `protobuf:"bytes,3,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{19}
}

func (x *ErrorMessage) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ErrorMessage) GetDiagnostics() []byte {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type McpJsonBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json []byte `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *McpJsonBlob) Reset() {
	*x = McpJsonBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McpJsonBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpJsonBlob) ProtoMessage() {}

func (x *McpJsonBlob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpJsonBlob.ProtoReflect.Descriptor instead.
func (*McpJsonBlob) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{20}
}

func (x *McpJsonBlob) GetJson() []byte {
	if x != nil {
		return x.Json
	}
	return nil
}

type A2AJsonBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json []byte `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *A2AJsonBlob) Reset() {
	*x = A2AJsonBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_axcp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A2AJsonBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A2AJsonBlob) ProtoMessage() {}

func (x *A2AJsonBlob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_axcp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A2AJsonBlob.ProtoReflect.Descriptor instead.
func (*A2AJsonBlob) Descriptor() ([]byte, []int) {
	return file_proto_axcp_proto_rawDescGZIP(), []int{21}
}

func (x *A2AJsonBlob) GetJson() []byte {
	if x != nil {
		return x.Json
	}
	return nil
}

var File_proto_axcp_proto protoreflect.FileDescriptor

var file_proto_axcp_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f, 0x31, 0x22, 0x9a, 0x05,
	0x0a, 0x0c, 0x41, 0x78, 0x63, 0x70, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x45, 0x0a,
	0x0e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f,
	0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76,
	0x30, 0x5f, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x65, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e,
	0x76, 0x30, 0x5f, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x65, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61,
	0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e,
	0x76, 0x30, 0x5f, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x45, 0x6e, 0x76, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x78, 0x63, 0x70,
	0x2e, 0x76, 0x30, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x07, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x4f, 0x70, 0x12, 0x29, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x4f, 0x70, 0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x06, 0x4f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x03,
	0x22, 0x76, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x4f, 0x70, 0x52, 0x03, 0x6f, 0x70, 0x73, 0x22, 0x4e, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76,
	0x30, 0x5f, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x6f, 0x0a,
	0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6a,
	0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12,
	0x42, 0x0a, 0x10, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x78, 0x63, 0x70,
	0x2e, 0x76, 0x30, 0x5f, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x0f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x74, 0x6c, 0x4d, 0x73, 0x22, 0x46, 0x0a, 0x0f, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x78,
	0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x22, 0x25, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x0d, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x78,
	0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f, 0x31, 0x2e, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76,
	0x30, 0x5f, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0xae, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x02,
	0x64, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e,
	0x76, 0x30, 0x5f, 0x31, 0x2e, 0x44, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x02, 0x64,
	0x70, 0x22, 0x5c, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x33, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x65, 0x0a, 0x12, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x73, 0x6d, 0x5f,
	0x62, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x77, 0x61, 0x73, 0x6d,
	0x42, 0x6c, 0x6f, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x74, 0x6c, 0x4d, 0x73, 0x22, 0x70, 0x0a, 0x0b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70,
	0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x22, 0x5e, 0x0a,
	0x0a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xa4, 0x01,
	0x0a, 0x11, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x30,
	0x5f, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e,
	0x76, 0x30, 0x5f, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x08, 0x44, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x30, 0x5f, 0x31, 0x2e, 0x44, 0x70, 0x4d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x04, 0x6d, 0x65, 0x63, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x70, 0x4e, 0x6f, 0x72, 0x6d, 0x12, 0x33, 0x0a, 0x04, 0x67, 0x72,
	0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x78, 0x63, 0x70, 0x2e,
	0x76, 0x30, 0x5f, 0x31, 0x2e, 0x44, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x04, 0x67, 0x72, 0x61, 0x6e, 0x22,
	0x2f, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02,
	0x22, 0x5c, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x21,
	0x0a, 0x0b, 0x4d, 0x63, 0x70, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x12, 0x0a,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6a, 0x73, 0x6f,
	0x6e, 0x22, 0x21, 0x0a, 0x0b, 0x41, 0x32, 0x41, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62,
	0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x6a, 0x73, 0x6f, 0x6e, 0x2a, 0x28, 0x0a, 0x0b, 0x44, 0x70, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x41, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x47, 0x41, 0x55, 0x53, 0x53, 0x49, 0x41, 0x4e, 0x10, 0x01, 0x2a, 0xcd,
	0x02, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x04, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41,
	0x44, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x07,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x4f, 0x5f, 0x4d,
	0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x09, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1e, 0x0a,
	0x1a, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x17, 0x0a,
	0x13, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x50, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x10, 0x42, 0x36,
	0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x2f, 0x61, 0x78, 0x63, 0x70, 0x2d, 0x73,
	0x70, 0x65, 0x63, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_axcp_proto_rawDescOnce sync.Once
	file_proto_axcp_proto_rawDescData = file_proto_axcp_proto_rawDesc
)

func file_proto_axcp_proto_rawDescGZIP() []byte {
	file_proto_axcp_proto_rawDescOnce.Do(func() {
		file_proto_axcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_axcp_proto_rawDescData)
	})
	return file_proto_axcp_proto_rawDescData
}

var file_proto_axcp_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_axcp_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_axcp_proto_goTypes = []interface{}{
	(DpMechanism)(0),             // 0: axcp.v0_1.DpMechanism
	(ErrorCode)(0),               // 1: axcp.v0_1.ErrorCode
	(DeltaOp_OpType)(0),          // 2: axcp.v0_1.DeltaOp.OpType
	(DpParams_Granularity)(0),    // 3: axcp.v0_1.DpParams.Granularity
	(*AxcpEnvelope)(nil),         // 4: axcp.v0_1.AxcpEnvelope
	(*DeltaOp)(nil),              // 5: axcp.v0_1.DeltaOp
	(*ContextPatch)(nil),         // 6: axcp.v0_1.ContextPatch
	(*ContextGraphVersion)(nil),  // 7: axcp.v0_1.ContextGraphVersion
	(*SyncSubscribe)(nil),        // 8: axcp.v0_1.SyncSubscribe
	(*SyncRequest)(nil),          // 9: axcp.v0_1.SyncRequest
	(*RetryEnvelope)(nil),        // 10: axcp.v0_1.RetryEnvelope
	(*CapabilityOffer)(nil),      // 11: axcp.v0_1.CapabilityOffer
	(*CapabilityRequest)(nil),    // 12: axcp.v0_1.CapabilityRequest
	(*CapabilityAck)(nil),        // 13: axcp.v0_1.CapabilityAck
	(*CapabilityMessage)(nil),    // 14: axcp.v0_1.CapabilityMessage
	(*CapabilityDescriptor)(nil), // 15: axcp.v0_1.CapabilityDescriptor
	(*ProfileNegotiate)(nil),     // 16: axcp.v0_1.ProfileNegotiate
	(*ProfileAck)(nil),           // 17: axcp.v0_1.ProfileAck
	(*RoutePolicyMessage)(nil),   // 18: axcp.v0_1.RoutePolicyMessage
	(*SystemStats)(nil),          // 19: axcp.v0_1.SystemStats
	(*TokenUsage)(nil),           // 20: axcp.v0_1.TokenUsage
	(*TelemetryDatagram)(nil),    // 21: axcp.v0_1.TelemetryDatagram
	(*DpParams)(nil),             // 22: axcp.v0_1.DpParams
	(*ErrorMessage)(nil),         // 23: axcp.v0_1.ErrorMessage
	(*McpJsonBlob)(nil),          // 24: axcp.v0_1.McpJsonBlob
	(*A2AJsonBlob)(nil),          // 25: axcp.v0_1.A2AJsonBlob
}
var file_proto_axcp_proto_depIdxs = []int32{
	6,  // 0: axcp.v0_1.AxcpEnvelope.context_patch:type_name -> axcp.v0_1.ContextPatch
	14, // 1: axcp.v0_1.AxcpEnvelope.capability_msg:type_name -> axcp.v0_1.CapabilityMessage
	18, // 2: axcp.v0_1.AxcpEnvelope.route_msg:type_name -> axcp.v0_1.RoutePolicyMessage
	23, // 3: axcp.v0_1.AxcpEnvelope.error:type_name -> axcp.v0_1.ErrorMessage
	16, // 4: axcp.v0_1.AxcpEnvelope.profile_neg:type_name -> axcp.v0_1.ProfileNegotiate
	17, // 5: axcp.v0_1.AxcpEnvelope.profile_ack:type_name -> axcp.v0_1.ProfileAck
	10, // 6: axcp.v0_1.AxcpEnvelope.retry_env:type_name -> axcp.v0_1.RetryEnvelope
	21, // 7: axcp.v0_1.AxcpEnvelope.telemetry:type_name -> axcp.v0_1.TelemetryDatagram
	2,  // 8: axcp.v0_1.DeltaOp.op:type_name -> axcp.v0_1.DeltaOp.OpType
	5,  // 9: axcp.v0_1.ContextPatch.ops:type_name -> axcp.v0_1.DeltaOp
	7,  // 10: axcp.v0_1.SyncSubscribe.from:type_name -> axcp.v0_1.ContextGraphVersion
	7,  // 11: axcp.v0_1.SyncRequest.missing_from:type_name -> axcp.v0_1.ContextGraphVersion
	6,  // 12: axcp.v0_1.RetryEnvelope.buffered_patches:type_name -> axcp.v0_1.ContextPatch
	15, // 13: axcp.v0_1.CapabilityOffer.desc:type_name -> axcp.v0_1.CapabilityDescriptor
	11, // 14: axcp.v0_1.CapabilityMessage.offer:type_name -> axcp.v0_1.CapabilityOffer
	12, // 15: axcp.v0_1.CapabilityMessage.request:type_name -> axcp.v0_1.CapabilityRequest
	13, // 16: axcp.v0_1.CapabilityMessage.ack:type_name -> axcp.v0_1.CapabilityAck
	22, // 17: axcp.v0_1.CapabilityDescriptor.dp:type_name -> axcp.v0_1.DpParams
	19, // 18: axcp.v0_1.TelemetryDatagram.system:type_name -> axcp.v0_1.SystemStats
	20, // 19: axcp.v0_1.TelemetryDatagram.tokens:type_name -> axcp.v0_1.TokenUsage
	0,  // 20: axcp.v0_1.DpParams.mech:type_name -> axcp.v0_1.DpMechanism
	3,  // 21: axcp.v0_1.DpParams.gran:type_name -> axcp.v0_1.DpParams.Granularity
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_proto_axcp_proto_init() }
func file_proto_axcp_proto_init() {
	if File_proto_axcp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_axcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AxcpEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextGraphVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncSubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileNegotiate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutePolicyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryDatagram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McpJsonBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_axcp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A2AJsonBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_axcp_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AxcpEnvelope_ContextPatch)(nil),
		(*AxcpEnvelope_CapabilityMsg)(nil),
		(*AxcpEnvelope_RouteMsg)(nil),
		(*AxcpEnvelope_Error)(nil),
		(*AxcpEnvelope_ProfileNeg)(nil),
		(*AxcpEnvelope_ProfileAck)(nil),
		(*AxcpEnvelope_RetryEnv)(nil),
		(*AxcpEnvelope_Telemetry)(nil),
	}
	file_proto_axcp_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*CapabilityMessage_Offer)(nil),
		(*CapabilityMessage_Request)(nil),
		(*CapabilityMessage_Ack)(nil),
	}
	file_proto_axcp_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*TelemetryDatagram_System)(nil),
		(*TelemetryDatagram_Tokens)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_axcp_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_axcp_proto_goTypes,
		DependencyIndexes: file_proto_axcp_proto_depIdxs,
		EnumInfos:         file_proto_axcp_proto_enumTypes,
		MessageInfos:      file_proto_axcp_proto_msgTypes,
	}.Build()
	File_proto_axcp_proto = out.File
	file_proto_axcp_proto_rawDesc = nil
	file_proto_axcp_proto_goTypes = nil
	file_proto_axcp_proto_depIdxs = nil
}
