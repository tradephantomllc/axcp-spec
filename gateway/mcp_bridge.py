#!/usr/bin/env python3
"""
Gateway PoC: translate MCP JSON request <-> AXCP Envelope.
Run: python gateway/mcp_bridge.py mcp.json
"""
import json, sys, os, base64, time

# Add the root directory and proto directory to sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../proto')))

from google.protobuf import json_format
import proto.axcp_pb2 as axcp  # generated by protoc

def mcp_to_axcp(mcp_json: dict) -> axcp.AxcpEnvelope:
    env = axcp.AxcpEnvelope(
        version = 1,
        trace_id = mcp_json.get("id", ""),
        profile  = 0  # MCP has no profiles
    )
    offer = axcp.CapabilityOffer(
        desc = axcp.CapabilityDescriptor(
            tool_id = mcp_json["tool"]["name"],
            descriptor_version = mcp_json["tool"].get("version", "0")
        )
    )
    env.capability_msg.offer.CopyFrom(offer)
    return env

def axcp_to_mcp(env: axcp.AxcpEnvelope) -> dict:
    """Very narrow mapping: ContextPatch -> MCP context_delta"""
    patch = env.context_patch
    delta_b64 = base64.b64encode(patch.SerializeToString()).decode()
    return {
        "id": env.trace_id,
        "context_delta": delta_b64,
        "ts": int(time.time()*1000)
    }

if __name__ == "__main__":
    with open(sys.argv[1]) as f:
        mcp = json.load(f)
    env = mcp_to_axcp(mcp)
    print("AXCP envelope ->", env)
    # round-trip demo
    back = axcp_to_mcp(env)
    print("Back to MCP ->", json.dumps(back, indent=2))
